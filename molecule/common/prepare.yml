---
- name: Build dynamic inventory
  ansible.builtin.import_playbook: inventory.yml

- name: Reconfigure guest disks
  hosts: guests
  gather_facts: false
  become: true
  vars_files:
    - vars.yml
  pre_tasks:
    - name: Reconfigure guest storage
      block:
        - name: Query active KVM guests
          ansible.builtin.command: "virsh list --state-running --name"
          changed_when: false
          register: _kvm_guest_query
          delegate_to: localhost

        - name: Wait for connection
          ansible.builtin.wait_for_connection:
            timeout: 1200
          when: inventory_hostname in (_kvm_guest_query.stdout_lines | map('trim'))

        - name: Shut down guest
          when: inventory_hostname in (_kvm_guest_query.stdout_lines | map('trim'))
          block:
            - name: Shut down guest
              community.general.shutdown:

            - name: Wait for shutdown to complete
              ansible.builtin.command: "virsh list --state-running --name"
              register: _kvm_guest_query
              failed_when: inventory_hostname in (_kvm_guest_query.stdout_lines | map('trim'))
              retries: 6
              delay: 10
              delegate_to: localhost

        - name: Reconfigure guest disks
          delegate_to: localhost
          block:
            - name: Stat KVM base disk
              ansible.builtin.stat:
                path: "{{ _libvirt_path }}/{{ inventory_hostname }}.img"
              register: guest_disk_query

            - name: Debug base disk info
              ansible.builtin.debug:
                msg: "{{ guest_disk_query.stat }}"

            - name: Resize KVM base disks
              ansible.builtin.command: "qemu-img resize -f raw {{ guest_disk }} {{ guest_disk_size }}"
              vars:
                guest_disk: "{{ _libvirt_path }}/{{ inventory_hostname }}.img"
                guest_disk_size: "{{ 2 * (disk_size | int) }}"
              when: (guest_disk_size | int) > (guest_disk_query.stat.size | int)

            - name: Stat additional KVM disk
              ansible.builtin.stat:
                path: "{{ _libvirt_path }}/{{ inventory_hostname }}.add.img"
              register: guest_addisk_query

            - name: Create additional KVM disk for lvm instances
              ansible.builtin.command: "qemu-img create -f raw {{ guest_disk }} {{ guest_disk_size }}"
              args:
                creates: "{{ guest_disk }}"
              vars:
                guest_disk: "{{ _libvirt_path }}/{{ inventory_hostname }}.add.img"
                guest_disk_size: "{{ 2 * (disk_size | int) }}"
              when:
                - not guest_addisk_query.stat.exists
                - partitioning_method == 'lvm'
              notify: kvm_disk_attach

            - name: Manage permissions for extra KVM guest disk
              ansible.builtin.file:
                path: "{{ guest_disk }}"
                owner: libvirt-qemu
                group: kvm
                mode: "ug=rw,o="
              vars:
                guest_disk: "{{ _libvirt_path }}/{{ inventory_hostname }}.add.img"
              when: partitioning_method == 'lvm'

            - name: Flush handlers
              ansible.builtin.meta: flush_handlers

            - name: Start KVM guest
              ansible.builtin.command: "virsh start {{ inventory_hostname }}"
              delegate_to: localhost

        - name: Wait for connection
          ansible.builtin.wait_for_connection:
            timeout: 120

        - name: Gather facts
          ansible.builtin.setup:
          tags: always

      always:
        - name: Set debug facts
          ansible.builtin.set_fact:
            debug_disk: "{{ disk_location }}.debug"
            debug_hostdir: "{{ _hostdir }}"
            debug_logfile: "{{ _logfile }}"
            debug_crashdir: "{{ _crashdir }}"
            debug_output_dir: "{{ molecule_install_dir }}"
            debug_output_curtin: "{{ molecule_install_dir }}/{{ inventory_hostname }}.curtin.log"
            debug_output_screenshot: "{{ molecule_install_dir }}/{{ inventory_hostname }}.png"
          vars:
            _hostdir: "{{ _libvirt_path }}/{{ inventory_hostname }}"
            _logfile: "{{ _hostdir }}/var/log/installer/curtin-install.log"
            _crashdir: "{{ _hostdir }}/var/crash/"

        - name: Create output directory
          ansible.builtin.file:
            state: directory
            path: "{{ debug_output_dir }}"
          delegate_to: localhost
          run_once: true

        - name: Take guest screenshot
          ansible.builtin.command: "virsh screenshot {{ inventory_hostname }} {{ debug_output_screenshot }}"
          delegate_to: localhost

  handlers:
    - name: Create definition for additional KVM guest disk
      ansible.builtin.template:
        src: disk.j2.xml
        dest: "{{ guest_disk_xml }}"
        owner: libvirt-qemu
        group: kvm
        mode: "ug=rw,o="
      vars:
        guest_hostname: "{{ inventory_hostname }}"
        guest_disk_extra_path: "{{ _libvirt_path }}/{{ inventory_hostname }}.add.img"
        guest_disk_format: raw
        guest_disk_xml: "{{ _libvirt_path }}/{{ guest_hostname }}.disk.xml"
      delegate_to: localhost
      listen: kvm_disk_attach

    - name: Attach additional KVM guest disk
      ansible.builtin.command: "virsh attach-device {{ guest_hostname }} --file {{ guest_disk_xml }} --config"
      vars:
        guest_hostname: "{{ inventory_hostname }}"
        guest_disk_xml: "{{ _libvirt_path }}/{{ guest_hostname }}.disk.xml"
      delegate_to: localhost
      listen: kvm_disk_attach
