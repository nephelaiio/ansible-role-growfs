---
- name: Create KVM guests
  ansible.builtin.import_playbook: nephelaiio.libvirt.create

- name: Reconfigure KVM guest disks
  hosts: all
  gather_facts: false
  pre_tasks:
    - name: Wait for connection
      ansible.builtin.wait_for_connection:
        timeout: 1200

    - name: Wait for install to complete
      ansible.builtin.pause:
        seconds: 300

    - name: Check regular device size
      ansible.builtin.assert:
        that: disk_size < disk_threshold
        fail_msg: "{{ (disk_size | int) }} >= {{ (disk_threshold | int) }}"
      vars:
        disk_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
        disk_size: "{{ disk_device.size_total }}"
        disk_threshold: "{{ (1.5 * (libvirt_disk_size | int)) | int }}"
      when: partitioning_method == 'regular'

    - name: Check lvm root device size
      ansible.builtin.assert:
        that: (disk_size | int) < (disk_threshold | int)
        fail_msg: "{{ (disk_size | int) }} >= {{ (disk_threshold | int) }}"
      vars:
        disk_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
        disk_size: "{{ disk_device.size_total }}"
        disk_threshold: "{{ (1.5 * (libvirt_disk_size | int)) | int }}"
      when: partitioning_method == 'lvm'

    - name: Check lvs root device size
      ansible.builtin.assert:
        that: ((disk_device | first).size_total | int) < (disk_threshold | int)
        fail_msg: "{{ ((disk_device | first).size_total | int) }} >= {{ (disk_threshold | int) }}"
      vars:
        disk_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list }}"
        disk_threshold: "{{ (1.5 * (libvirt_disk_size | int)) }}"
      when: partitioning_method == 'lvm'

- name: Reconfigure KVM guest disks
  hosts: all
  connection: local
  gather_facts: false
  become: "{{ lookup('ansible.builtin.env', 'CI') | default('false') | bool }}"
  vars:
    libvirt_daemon_user: "{{ _libvirt_daemon_user }}"
    guest_disk_base: "{{ libvirt_path }}/{{ inventory_hostname }}.img"
    guest_disk_extra: "{{ libvirt_path }}/{{ inventory_hostname }}.add.img"
  tasks:
    - name: Reconfigure KVM guest storage
      delegate_to: localhost
      block:
        - name: Stop KVM guests
          ansible.builtin.command: "virsh -c qemu:///system destroy {{ inventory_hostname }}"
          changed_when: true

        - name: Wait for shutdown to complete
          ansible.builtin.command: "virsh -c qemu:///system list --state-running --name"
          register: _kvm_guest_query
          failed_when: inventory_hostname in (_kvm_guest_query.stdout_lines | map('trim'))
          retries: 6
          delay: 10
          delegate_to: localhost

        - name: Reconfigure KVM guest disks
          block:
            - name: Stat KVM base disk
              ansible.builtin.stat:
                path: "{{ libvirt_path }}/{{ inventory_hostname }}.img"
              register: guest_disk_query

            - name: Debug base disk info
              ansible.builtin.debug:
                msg: "{{ guest_disk_query.stat }}"

            - name: Resize KVM base disks for static partitioning
              ansible.builtin.command: "qemu-img resize -f qcow2 {{ guest_disk_base }} {{ guest_disk_size }}"
              vars:
                guest_disk_size: "{{ 2 * (libvirt_disk_size | int) }}"
              when: (guest_disk_size | int) > (guest_disk_query.stat.size | int)

            - name: Manage disks for lvm partitioning
              when: partitioning_method == 'lvm'
              block:
                - name: Create additional KVM disk for lvm partitioning
                  ansible.builtin.command: "qemu-img create -f qcow2 {{ guest_disk_extra }} {{ guest_disk_size }}"
                  args:
                    creates: "{{ guest_disk_extra }}"
                  vars:
                    guest_disk_size: "{{ 2 * (libvirt_disk_size | int) }}"
                  notify: kvm_disk_attach

                - name: Manage permissions for extra KVM guest disk
                  ansible.builtin.file:
                    path: "{{ guest_disk_extra }}"
                    owner: "{{ libvirt_daemon_user }}"
                    mode: "ug=rw,o="
                  become: true

            - name: Flush handlers
              ansible.builtin.meta: flush_handlers

            - name: Start KVM guest
              ansible.builtin.command: "virsh -c qemu:///system start {{ inventory_hostname }}"
              delegate_to: localhost

      always:
        - name: Take screenshot of KVM guest
          delegate_to: localhost
          block:
            - name: Set debug facts
              ansible.builtin.set_fact:
                debug_output_screenshot: "{{ molecule_install_dir }}/{{ inventory_hostname }}.png"

            - name: Create output directory
              ansible.builtin.file:
                state: directory
                path: "{{ debug_output_screenshot | dirname }}"
              delegate_to: localhost
              run_once: true

            - name: Take guest screenshot
              ansible.builtin.command: "virsh -c qemu:///system screenshot {{ inventory_hostname }} {{ debug_output_screenshot }}"
              delegate_to: localhost

  handlers:
    - name: Create definition for additional KVM guest disk
      ansible.builtin.template:
        src: disk.j2.xml
        dest: "{{ guest_disk_xml }}"
        owner: "{{ libvirt_daemon_user }}"
        mode: "ug=rw,o="
      vars:
        guest_disk_extra_path: "{{ guest_disk_extra }}"
        guest_disk_format: qcow2
        guest_disk_xml: "{{ libvirt_path }}/{{ inventory_hostname }}.disk.xml"
      delegate_to: localhost
      listen: kvm_disk_attach

    - name: Attach additional KVM guest disk
      ansible.builtin.command: "virsh -c qemu:///system attach-device {{ inventory_hostname }} --file {{ guest_disk_xml }} --config"
      vars:
        guest_disk_xml: "{{ libvirt_path }}/{{ inventory_hostname }}.disk.xml"
      delegate_to: localhost
      listen: kvm_disk_attach
