---
- name: Configure KVM virtualization
  ansible.builtin.import_playbook: kvm.yml

- name: Spawn KVM guests
  hosts: localhost
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Cache installer iso
      ansible.builtin.get_url:
        url: "{{ molecule_installer_url }}"
        dest: "{{ _libvirt_path }}/{{ molecule_distro }}.iso"

    - name: Build ubuntu installer isos
      ansible.builtin.include_role:
        name: nephelaiio.ubuntu_installer
      vars:
        ubuntu_installer_interface_name: enp1s0
        ubuntu_installer_target_dir: "{{ _libvirt_path }}"
        ubuntu_installer_image_url: "file://{{ _libvirt_path }}/{{ molecule_distro }}.iso"
        ubuntu_installer_hostname: "{{ guest.installer_hostname }}"
        ubuntu_installer_username: molecule
        ubuntu_installer_password: "{{ 'molecule' | password_hash('sha512') }}"
        ubuntu_installer_sshkey:
          - "{{ lookup('file', _libvirt_keypair + '.pub') }}"
        ubuntu_installer_interface: "{{ guest.installer_interface }}"
        ubuntu_installer_partman_method: "{{ guest.installer_partitioning_method }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ molecule_kvm_guests }}"
      when: molecule_scenario == "ubuntu"

    - name: Build debian installer isos
      ansible.builtin.include_role:
        name: nephelaiio.debian_installer
      vars:
        debian_installer_interface_name: enp1s0
        debian_installer_target_dir: "{{ _libvirt_path }}"
        debian_installer_image_url: "file://{{ _libvirt_path }}/{{ molecule_distro }}.iso"
        debian_installer_hostname: "{{ guest.installer_hostname }}"
        debian_installer_username: molecule
        debian_installer_password: "{{ 'molecule' | password_hash('sha512') }}"
        debian_installer_sshkey:
          - "{{ lookup('file', _libvirt_keypair + '.pub') }}"
        debian_installer_interface: "{{ guest.installer_interface }}"
        debian_installer_partman_method: "{{ guest.installer_partitioning_method }}"
        debian_installer_preseed_include: "{{ guest.installer_preseed_include | default('') }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ molecule_kvm_guests }}"
      when: molecule_scenario == "debian"

    - name: Query active KVM guests
      ansible.builtin.command: "virsh list --all --name"
      register: _kvm_guest_query

    - name: Destroy KVM guest
      ansible.builtin.command: "virsh destroy {{ item }}"
      loop: "{{ molecule_kvm_guests | map(attribute='installer_hostname') }}"
      when: item in (_kvm_guest_query.stdout_lines | map('trim'))

    - name: Destroy KVM guest disks
      ansible.builtin.file:
        path: "{{ _libvirt_path }}/{{ item }}.img"
        state: absent
      loop: "{{ molecule_kvm_guests | map(attribute='installer_hostname') }}"

    - name: Create KVM guest disks
      ansible.builtin.command: "qemu-img create {{ guest_disk }} {{ guest_disk_size }}"
      args:
        creates: "{{ guest_disk }}"
      vars:
        guest_disk: "{{ _libvirt_path }}/{{ guest.installer_hostname }}.img"
        guest_disk_size: "{{ guest.installer_disk_size }}"
      loop_control:
        loop_var: guest
        label: "{{ guest.installer_hostname }}"
      loop: "{{ molecule_kvm_guests }}"

    - name: Manage permissions for KVM guest disks
      ansible.builtin.file:
        path: "{{ _libvirt_path }}/{{ item }}.img"
        owner: libvirt-qemu
        group: kvm
        mode: "uog=rw"
      loop: "{{ molecule_kvm_guests | map(attribute='installer_hostname') }}"

    - name: Template KVM guest XMLs
      ansible.builtin.template:
        src: "vm.j2.xml"
        dest: "{{ _libvirt_path }}/{{ item }}.xml"
        mode: "u=rw,g=r,o="
      vars:
        guest_hostname: "{{ item }}"
        guest_network: "{{ molecule_libvirt_network }}"
        guest_iso: "{{ _libvirt_path }}/{{ item }}.iso"
        guest_disk_path: "{{ _libvirt_path }}/{{ item }}.img"
        guest_mac: "{{ '52:54:00' | random_mac(seed=item) }}"
        guest_disk_format: raw
      loop: "{{ molecule_kvm_guests | map(attribute='installer_hostname') }}"

    - name: Create KVM guests
      ansible.builtin.command: "virsh define {{ _libvirt_path }}/{{ item }}.xml --validate"
      loop: "{{ molecule_kvm_guests | map(attribute='installer_hostname') }}"

    - name: Start KVM guest
      ansible.builtin.command: "virsh start {{ item }}"
      loop: "{{ molecule_kvm_guests | map(attribute='installer_hostname') }}"
