---
- name: Configure KVM host
  hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  tasks:
    - name: Install deb package requirements
      ansible.builtin.apt:
        name:
          - qemu-kvm
          - "{{ _qemu_efi }}"
          - libvirt-clients
          - libvirt-daemon-system
          - libvirt-daemon-system-systemd
        update_cache: true
      vars:
        _is_ubuntu: "{{ ansible_facts['distribution'] == 'Ubuntu' }}"
        _is_noble: "{{ ansible_facts['distribution_version'] is version('24.04', '>=') }}"
        _qemu_efi: "qemu-efi{{ '-aarch64' if (_is_ubuntu and _is_noble) else '' }}"
      become: true

    - name: Query libvirt pools
      ansible.builtin.command: "virsh pool-list --name"
      register: _pool_query

    - name: Create libvirt path
      ansible.builtin.file:
        path: "{{ _libvirt_path }}"
        state: directory
        owner: "{{ _libvirt_daemon_user }}"
        group: "{{ _libvirt_daemon_group }}"
        mode: "u=rwx,g=rx,o=rx"
      become: true

    - name: Grant playbook user access to libvirt path
      ansible.posix.acl:
        path: "{{ _libvirt_path }}"
        entity: "{{ ansible_env.USER }}"
        etype: user
        permissions: rwx
        state: present
      become: true

    - name: Create libvirt tempdir
      ansible.builtin.tempfile:
        state: directory
        prefix: libvirt
      register: _libvirt_tmpdir
      changed_when: false

    - name: Manage libvirt pools and networks
      become: true
      block:
        - name: Query libvirt pools
          ansible.builtin.command: "virsh pool-list --name"
          register: _pool_query
          changed_when: false

        - name: Create libvirt pool
          when: (_libvirt_pool | trim) not in (_pool_query.stdout_lines | map('trim') | list)
          block:
            - name: Create libvirt pool template
              ansible.builtin.template:
                src: "pool.j2.xml"
                dest: "{{ _libvirt_tmpdir.path }}/pool.xml"
                mode: "u=rw,g=r,o="
              vars:
                _pool_name: "{{ _libvirt_pool }}"
                _pool_path: "{{ _libvirt_path }}"

            - name: Define libvirt pool
              ansible.builtin.command: "virsh pool-define {{ _libvirt_tmpdir.path }}/pool.xml --validate"
              changed_when: true

            - name: Start libvirt pool
              ansible.builtin.command: "virsh pool-start {{ _libvirt_pool }}"
              changed_when: true

        - name: Query libvirt networks
          ansible.builtin.command: "virsh net-list --name --all"
          register: _net_query
          changed_when: false

        - name: Query inactive libvirt networks
          ansible.builtin.command: "virsh net-list --inactive --name"
          register: _net_inactive_query
          changed_when: false

        - name: Set libvirt network facts
          ansible.builtin.set_fact:
            _libvirt_network_create: "{{ (_libvirt_network_custom | bool) and not (_libvirt_network_exists | bool) }}"
            _libvirt_network_present: "{{ _libvirt_network_exists }}"
            _libvirt_network_inactive: "{{ (_libvirt_network | trim) in _libvirt_network_inactive_list }}"
          vars:
            _libvirt_network_list: "{{ _net_query.stdout_lines | map('trim') | list }}"
            _libvirt_network_exists: "{{ (_libvirt_network | trim) in _libvirt_network_list }}"
            _libvirt_network_custom: "{{ _libvirt_network != 'default' }}"
            _libvirt_network_inactive_list: "{{ _net_inactive_query.stdout_lines | map('trim') | list }}"

        - name: Create libvirt network
          when: _libvirt_network_create | bool
          block:
            - name: Create libvirt network template
              ansible.builtin.template:
                src: "network.j2.xml"
                dest: "{{ _libvirt_tmpdir.path }}/network.xml"
                mode: "u=rw,g=r,o="
              vars:
                _net_name: "{{ _libvirt_network | trim }}"
                _net_address: "{{ _libvirt_address | ansible.utils.ipaddr('address') }}"
                _net_mask: "{{ _libvirt_address | ansible.utils.ipaddr('netmask') }}"
                _net_bridge: "{{ _net_name }}br0"

            - name: Add libvirt network
              ansible.builtin.command: "virsh net-define {{ _libvirt_tmpdir.path }}/network.xml --validate"
              changed_when: _libvirt_network_create | bool

            - name: Set libvirt network autostart
              ansible.builtin.command: "virsh net-autostart {{ _libvirt_network }}"
              changed_when: _libvirt_network_create | bool

        - name: Start libvirt network
          ansible.builtin.command: "virsh net-start {{ _libvirt_network }}"
          when: (_libvirt_network_create | bool) or (_libvirt_network_inactive | bool)

      always:
        - name: Destroy libvirt tempdir
          ansible.builtin.file:
            dest: "{{ _libvirt_tmpdir.path }}"
            state: absent
          changed_when: false

    - name: Create KVM keypair
      ansible.builtin.command:
        cmd: "ssh-keygen -t rsa -f {{ _libvirt_keypair }} -q -P '' -C ''"
        creates: "{{ _libvirt_keypair }}"
