---
- name: Verify guests
  hosts: all
  gather_facts: false
  tasks:
    - name: Debug connection parameters
      ansible.builtin.debug:
        msg: "ssh {{ ansible_user }}@{{ ansible_host }} {{ _args }} -i {{ ansible_ssh_private_key_file }} -p {{ ansible_port }}"
      vars:
        _args: "{{ ansible_ssh_common_args | default('') }}"

    - name: Verify filesystems
      block:
        - name: Wait for connection
          ansible.builtin.wait_for_connection:
            timeout: 300

        - name: Gather facts
          ansible.builtin.setup:

        - name: Gather partition info
          ansible.builtin.shell:
            cmd: "set -o pipefail && lsblk -l | grep /$"
            executable: /bin/bash
          register: lsblk_output

        - name: Check static partitioning
          ansible.builtin.fail:
            msg: "expected plain partitioning, found '{{ lsblk_output.stdout }}'"
          when:
            - partitioning_method == 'regular'
            - lsblk_output.stdout is not search("part") or
              lsblk_output.stdout is search("lvm")

        - name: Include lvm checks
          when: partitioning_method == 'lvm'
          block:
            - name: Verify lvm partitioning
              ansible.builtin.fail:
                msg: "lvm partitioning failed: {{ lsblk_output.stdout }}"
              when: lsblk_output.stdout is not search('lvm')

        - name: Debug static disk size
          ansible.builtin.debug:
            msg: "{{ ((root_device.size_total | int) / (1024**3)) | int }}G"
          vars:
            root_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"

        - name: Check regular device size
          ansible.builtin.assert:
            that: disk_size > disk_threshold
            fail_msg: "{{ (disk_size | int) }} <= {{ (disk_threshold | int) }}"
          vars:
            disk_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
            disk_size: "{{ disk_device.size_total }}"
            disk_threshold: "{{ (1.5 * (libvirt_disk_size | int)) | int }}"
          when: partitioning_method == 'regular'

        - name: Check lvm root device size
          ansible.builtin.assert:
            that: (disk_size | int) > (disk_threshold | int)
            fail_msg: "{{ (disk_size | int) }} <= {{ (disk_threshold | int) }}"
          vars:
            disk_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
            disk_size: "{{ disk_device.size_total }}"
            disk_threshold: "{{ (1.5 * (libvirt_disk_size | int)) | int }}"
          when: partitioning_method == 'lvm'

        - name: Check lvs root device size
          ansible.builtin.assert:
            that: ((disk_device | first).size_total | int) > (disk_threshold | int)
            fail_msg: "{{ ((disk_device | first).size_total | int) }} <= {{ (disk_threshold | int) }}"
          vars:
            disk_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list }}"
            disk_threshold: "{{ (1.5 * (libvirt_disk_size | int)) }}"
          when: partitioning_method == 'lvm'

      always:
        - name: Set debug facts
          ansible.builtin.set_fact:
            debug_output_dir: "{{ molecule_install_dir }}"
            debug_output_screenshot: "{{ molecule_install_dir }}/{{ inventory_hostname }}.png"
          vars:
            _hostdir: "{{ _libvirt_path }}/{{ inventory_hostname }}"
            _logfile: "{{ _hostdir }}/var/log/installer/curtin-install.log"

        - name: Create output directory
          ansible.builtin.file:
            state: directory
            path: "{{ debug_output_dir }}"
          delegate_to: localhost
          run_once: true

        - name: Take guest screenshot
          ansible.builtin.command: "virsh -c qemu:///system screenshot {{ inventory_hostname }} {{ debug_output_screenshot }}"
          become: "{{ lookup('ansible.builtin.env', 'CI') | default('false') | bool }}"
          delegate_to: localhost
