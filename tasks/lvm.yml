---
- name: Ensure unique volume group
  ansible.builtin.fail:
    msg: "multiple volume groups detected"
  when:
    - lvm_vgs | length > 1
    - growfs_vg_name is not defined

- name: Ensure volume group matches input
  ansible.builtin.fail:
    msg: "expected volume group {{ growfs_vg_name }}, found {{ lvm_vgs | map(attribute='vg_name') | first }}"
  when:
    - lvm_vgs | length == 1
    - growfs_vg_name is defined
    - (growfs_vg_name != lvm_vgs | map(attribute='vg_name') | first)

- name: Register vg facts
  ansible.builtin.set_fact:
    _vg_name: "{{ growfs_vg_name }}"
  when: growfs_vg_name is defined

- name: Register vg facts
  ansible.builtin.set_fact:
    _vg_name: "{{ lvm_vgs | map(attribute='vg_name') | first }}"
  when: growfs_vg_name is not defined

- name: Register storage device metadata
  ansible.builtin.import_tasks: metadata/storage.yml

- name: Refresh kernel disk info
  ansible.builtin.shell: "echo 1 > /sys/class/block/{{ item }}/device/rescan"
  loop: "{{ __growfs_target_devices | map(attribute='name') | list }}"
  changed_when: false
  ignore_errors: true
  tags: skip_ansible_lint

- name: Create partition on empty disks
  community.general.parted:
    device: "{{ device_name }}"
    number: 1
    state: present
  vars:
    device_name: "/dev/{{ item.name }}"
  loop_control:
    label: "{{ device_name }}"
  loop: "{{ __growfs_target_devices | default([]) }}"
  when: item.partitions | length == 0

- name: Refresh storage device metadata
  ansible.builtin.import_tasks: metadata/storage.yml

- name: Resize partitions
  ansible.builtin.command: growpart {{ partition_device }} {{ item.partitions | length }}
  vars:
    partition_begin: "{{ item.partitions | map(attribute='start') | map('int') | max | string }}"
    partition_target: "{{ item.partitions | selectattr('start', 'equalto', partition_begin) | list | first }}"
    partition_device: "/dev/{{ item.name }}"
  loop_control:
    label: "{{ partition_target.name }}"
  loop: "{{ __growfs_target_devices }}"
  when: (item.used_sectors | int) < ((item.sectors | int) * (growfs_resize_threshold | int)/100)

- name: Resize filesystems (ansible < 2.10)
  community.general.filesystem:
    dev: "{{ partition_device }}"
    fstype: "{{ __growfs_mountpoints[partition_device].fstype }}"
    resizefs: true
    force: false
  vars:
    partition_begin: "{{ item.partitions | map(attribute='start') | map('int') | max | string }}"
    partition_target: "{{ item.partitions | selectattr('start', 'equalto', partition_begin) | list | first }}"
    partition_device: "/dev/{{ partition_target.name }}"
  loop_control:
    label: "{{ partition_device }}"
  loop: "{{ __growfs_target_devices }}"
  when:
    - partition_device in __growfs_mountpoints
    - ansible_version.full is version('2.10.0', '<')

- name: Resize filesystems (ansible >= 2.10)
  community.general.filesystem:
    dev: "{{ partition_device }}"
    fstype: "{{ __growfs_mountpoints[partition_device].fstype }}"
    resizefs: true
    state: present
    force: false
  vars:
    partition_begin: "{{ item.partitions | map(attribute='start') | map('int') | max | string }}"
    partition_target: "{{ item.partitions | selectattr('start', 'equalto', partition_begin) | list | first }}"
    partition_device: "/dev/{{ partition_target.name }}"
  loop_control:
    label: "{{ partition_device }}"
  loop: "{{ __growfs_target_devices }}"
  when:
    - partition_device in __growfs_mountpoints
    - ansible_version.full is version('2.10.0', '>=')

- name: Initialize pv metadata
  ansible.builtin.set_fact:
    vg_unassigned_pvs: []
    vg_assigned_pvs: "{{ {_vg_name: []} }}"
    mount_uuids: "{{ __growfs_mountpoints.values() | rejectattr('uuid', 'equalto', 'N/A') | map(attribute='uuid') | unique }}"

- name: Filter assigned pvs
  ansible.builtin.set_fact:
    vg_assigned_pvs: "{{ vg_assigned_pvs | combine({vg_name: vg_pvs}) }}"
  vars:
    vg_name: "{{ item.vg_name }}"
    vg_pvs: "{{ lvm_pvs | selectattr('vg_name', 'equalto', vg_name) | map(attribute='pv_name') | list | flatten }}"
  loop_control:
    label: "{{ vg_name }}"
  loop: "{{ lvm_vgs }}"

- name: Filter unassigned pvs
  ansible.builtin.set_fact:
    vg_unassigned_pvs: "{{ vg_unassigned_pvs + [partition_device] }}"
  vars:
    partition_disk: "{{ item.0 }}"
    partition_data: "{{ item.1 }}"
    partition_uuids: "{{ partition_data['links']['uuids'] }}"
    partition_device: "/dev/{{ partition_data.name }}"
    device_dict: "{{ __growfs_target_devices | list_to_dict('name') }}"
    device_data: "{{ device_dict[partition_disk.name] }}"
  loop_control:
    label: "{{ partition_device }}"
  loop: "{{ q('subelements', __growfs_target_devices, 'partitions') }}"
  when:
    - device_data.partitions | length | int == 1
    - partition_device not in __growfs_mountpoints
    - partition_device not in (vg_assigned_pvs.values() | flatten(levels=1))
    - partition_uuids | intersect(mount_uuids) | length == 0

- name: Debug unassigned pvs
  ansible.builtin.debug:
    var: vg_unassigned_pvs

- name: Resize pvs
  ansible.builtin.command: "pvresize {{ item.pv_name }}"
  loop_control:
    label: "{{ item.pv_name }}"
  loop: '{{ lvm_pvs }}'
  changed_when: false
  tags: skip_ansible_lint

- name: Resize vg
  community.general.lvg:
    state: present
    vg: "{{ _vg_name }}"
    pvs: "{{ (vg_assigned_pvs[_vg_name] + vg_unassigned_pvs) | unique }}"

- name: Filter lvm lvs
  ansible.builtin.set_fact:
    __growfs_target_lvs: "{{ lvm_lvs | map(attribute='lv_name') | select('match', growfs_lvs_regex) | list }}"

- name: Select lvs target
  when: growfs_lvs_name is undefined
  block:

    - name: Ensure target lvs is unambiguous
      ansible.builtin.fail:
        msg: "multiple logical volumes present ({{ __growfs_target_lvs.join(', ') }}) and growfs_lvs_name is unset"
      when: __growfs_target_lvs | length > 1

    - name: Set lvs target
      ansible.builtin.set_fact:
        growfs_lvs_name: "{{ __growfs_target_lvs | first }}"
      when: __growfs_target_lvs | length > 0

    - name: Clear lvs target
      ansible.builtin.set_fact:
        growfs_lvs_name: ''
      when: __growfs_target_lvs | length == 0

- name: Extend logical volume
  when: growfs_lvs_name != ''
  block:

    - name: Manage logical volume
      community.general.lvol:
        vg: "{{ _vg_name }}"
        lv: "{{ growfs_lvs_name }}"
        resizefs: true
        size: "{{ '+' if growfs_lvs_name in __growfs_target_lvs else '' }}100%FREE"

    - name: Manage lvs filesystem (ansible < 2.10)
      community.general.filesystem:
        dev: "/dev/{{ _vg_name }}/{{ growfs_lvs_name }}"
        fstype: "{{ _growfs_lvs_fs }}"
      when: ansible_version.full is version('2.10.0', '<')

    - name: Manage lvs filesystem (ansible >= 2.10)
      community.general.filesystem:
        dev: "/dev/{{ _vg_name }}/{{ growfs_lvs_name }}"
        fstype: "{{ _growfs_lvs_fs }}"
        state: present
      when: ansible_version.full is version('2.10.0', '>=')

    - name: Manage volume mount
      when: growfs_lvs_mount is defined
      block:

        - name: Manage mount directory
          ansible.builtin.file:
            path: "{{ growfs_lvs_mount }}"
            state: directory

        - name: Manage lvs mount
          ansible.posix.mount:
            src: "/dev/{{ _vg_name }}/{{ growfs_lvs_name }}"
            path: "{{ growfs_lvs_mount }}"
            fstype: "{{ _growfs_lvs_fs }}"
            state: mounted

    - name: Extend lvs filesystem (ansible < 2.10)
      community.general.filesystem:
        dev: "/dev/{{ _vg_name }}/{{ growfs_lvs_name }}"
        fstype: "{{ _growfs_lvs_fs }}"
        resizefs: true
      when: ansible_version.full is version('2.10.0', '<')

    - name: Extend lvs filesystem (ansible >= 2.10)
      community.general.filesystem:
        dev: "/dev/{{ _vg_name }}/{{ growfs_lvs_name }}"
        fstype: "{{ _growfs_lvs_fs }}"
        resizefs: true
        state: present
      when: ansible_version.full is version('2.10.0', '>=')
